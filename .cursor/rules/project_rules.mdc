---
description: 
globs: 
alwaysApply: true
---
# AI Assistant Development Rules for CarDash Project

## Preamble

These rules are designed to guide the AI assistant in developing applications like CarDash. The primary goal is to create software that is **useful**, **privacy-focused**, **easy to run & use**, and **open-source**. The AI should always prioritize these principles in its suggestions, code generation, and problem-solving approaches. Refer to the project's `README.md` for specific application context and privacy commitments.

---

## I. Foundational Principles & Goal Alignment

**Rule 1.1: Uphold Core Project Tenets.**
*   **AI Action:** Consistently prioritize the project's stated goals (e.g., usefulness, privacy, ease of use, open-source nature as per `README.md`) in all suggestions and code generation. If a user request conflicts with these tenets, flag the conflict and propose alternative solutions that align with the core principles.

**Rule 1.2: Simplicity as a Guiding Star.**
*   **AI Action:** Default to the simplest and most straightforward technical solution that meets the functional requirements. Avoid premature optimization or unnecessarily complex patterns. If a more complex solution is proposed, clearly explain the rationale and how it significantly benefits the project's core goals without undue compromise.

**Rule 1.3: Offline-First for Core Functionality.**
*   **AI Action:** Design and implement core features (e.g., OBD-II connection, real-time metric display, local data logging for CarDash) to be fully functional without an internet connection, as emphasized in CarDash's "No Internet Required" principle.

---

## II. Data Management & Privacy

**Rule 2.1: Zero External Data Transmission (Default).**
*   **AI Action:** Do not propose or implement any code that transmits user data, vehicle data, or usage statistics to any external server, analytics service, or third-party. All data must remain on the user's device unless *explicitly* directed by the user for a clearly defined, user-initiated, privacy-respecting feature (e.g., manual data export).

**Rule 2.2: Local-Only Storage.**
*   **AI Action:** Design all data persistence mechanisms (e.g., user settings, metric history, diagnostic logs) to use on-device storage exclusively (e.g., Android SharedPreferences, Room database).

**Rule 2.3: No User Accounts or Persistent Identifiers.**
*   **AI Action:** Ensure the application functions fully without requiring user registration, login, or the collection of personally identifiable information (PII) or any other persistent user/device identifiers that could be used for tracking.

**Rule 2.4: Minimal Data Collection for Functionality.**
*   **AI Action:** If data must be collected (e.g., OBD-II metrics for display and local logging), ensure it's strictly limited to what is essential for the app's intended functionality. Do not collect or store "just-in-case" data.

---

## III. Code Quality & Maintainability

**Rule 3.1: Idiomatic & Clean Code.**
*   **AI Action:** Generate code that adheres to the language's idiomatic best practices (e.g., Kotlin for Android) and established style guides. Code must be well-formatted, readable, and self-documenting where possible.

**Rule 3.2: Modularity & Single Responsibility (Write Small, Focused Code).**
*   **AI Action:** Structure code into logical, small, and focused modules, classes, and functions, each with a clear and single responsibility. Emphasize breaking down complex tasks into smaller, manageable, and testable units. This is crucial for enhancing maintainability, testability, and ease of understanding for contributors.

**Rule 3.3: Robust and User-Friendly Error Handling.**
*   **AI Action:** Implement comprehensive error handling for potential issues (e.g., Bluetooth connection failures, OBD-II communication errors, invalid data responses, I/O failures). Errors should be handled gracefully, providing clear, understandable feedback to the user where appropriate, without crashing the application or exposing raw technical error messages.

**Rule 3.4: Testable by Design.**
*   **AI Action:** Write code, especially business logic (e.g., in ViewModels, services, data repositories), in a way that is easily unit-testable. Upon request, provide assistance in generating unit test stubs or complete tests for new or modified functionalities.

---

## IV. Resource Management & Performance

**Rule 4.1: Lightweight by Default.**
*   **AI Action:** Prioritize solutions that minimize resource consumption (CPU, memory, battery). Choose efficient algorithms and data structures. Avoid background tasks that are not essential or are overly resource-intensive. Highlight potential performance implications of different approaches.

**Rule 4.2: Responsive User Interface.**
*   **AI Action:** Ensure UI interactions are smooth and the application responds quickly to user input. Offload long-running tasks from the main thread using appropriate concurrency mechanisms (e.g., Kotlin Coroutines for Android).

---

## V. User Experience (UX) & Usability

**Rule 5.1: Intuitive and Simple Interface.**
*   **AI Action:** When assisting with UI design or implementation (e.g., Jetpack Compose), prioritize clarity, simplicity, and ease of use. Follow platform conventions (e.g., Material Design for Android) unless a deviation is well-justified for improved usability within the app's context.

**Rule 5.2: Clear Feedback and State Indication.**
*   **AI Action:** Ensure the UI clearly communicates the application's current state (e.g., connecting, connected, error, loading data) and provides appropriate feedback for user actions.

---

## VI. Dependencies & External Integrations

**Rule 6.1: Minimize External Dependencies.**
*   **AI Action:** Prefer solutions using native platform APIs (e.g., Android SDK, Jetpack libraries) or existing project code over adding new third-party libraries. The goal is to keep the app lean and reduce potential points of failure or privacy compromise.

**Rule 6.2: Scrutinize All Dependencies.**
*   **AI Action:** If a third-party library is deemed necessary, choose only well-maintained, reputable libraries with minimal footprints and transparent practices. Justify their inclusion by highlighting significant benefits that align with project goals (e.g., core functionality not easily replicable, major simplification, critical performance gain) and ensure they don't compromise privacy or add unnecessary bulk.

**Rule 6.3: Justify Every Permission Request.**
*   **AI Action:** Only include and request Android permissions that are absolutely essential for a feature to function. For each permission, provide a clear explanation of its necessity in relation to the specific functionality it enables.

---

## VII. Documentation & Open Source Readiness

**Rule 7.1: Comprehensive Code Documentation.**
*   **AI Action:** Generate clear and concise comments for complex logic, public APIs, and non-obvious code sections. Use standard documentation formats (e.g., KDoc for Kotlin, JavaDoc for Java).

**Rule 7.2: Maintain Project Documentation.**
*   **AI Action:** Assist in drafting, updating, and maintaining core project documents like `README.md` (covering project purpose, features, setup, usage) and `CONTRIBUTING.md` (guidelines for code style, pull requests, and issue reporting).

**Rule 7.3: Transparent Configuration & Build Process.**
*   **AI Action:** Ensure build scripts (e.g., `build.gradle.kts`) and other project configurations are clean, well-commented where necessary, and structured to be easily understood and modified by other developers.

---

## VIII. AI Collaboration & Iteration

**Rule 8.1: Deliberate Action (Think Before Acting).**
*   **AI Action:** Before proposing code changes or significant architectural suggestions, take a moment to internally review the request, the existing context, and these project rules. Ensure the proposed solution is well-aligned and directly addresses the user's need without unnecessary side-effects or deviations from project goals.

**Rule 8.2: First Principles Thinking.**
*   **AI Action:** When faced with a complex problem or requirement, attempt to break it down to its fundamental truths or core requirements (first principles) before suggesting a solution. This helps in avoiding assumptions, exploring simpler alternatives, and building more robust and targeted solutions.

**Rule 8.3: Iterative Refinement & Critical Review.**
*   **AI Action:** Present solutions clearly and be prepared to iterate on them based on specific feedback. Encourage the developer to critically review all AI-generated code and suggestions before integration.

**Rule 8.4: Explain Your Reasoning.**
*   **AI Action:** When proposing solutions, especially those involving trade-offs, architectural decisions, or the introduction of new patterns/libraries, provide a brief and clear explanation of the rationale.

**Rule 8.5: Emphasize Contextual Understanding.**
*   **AI Action:** If a request is ambiguous or lacks sufficient context, proactively ask for clarification to ensure generated solutions are relevant and effective. (This also serves as a reminder to the developer to provide good context).

---

## IX. Continuing Development & New Features

**Rule 9.1: Feature Prioritization Aligned with Core Goals.**
*   **AI Action:** When discussing potential new features (like Android Auto or Gemini AI integration mentioned in `README.md`), I will help evaluate them based on their alignment with the core tenets: usefulness, privacy, ease of use, and open-source readiness. I will highlight any potential conflicts with these principles.

**Rule 9.2: Incremental Development & Iteration.**
*   **AI Action:** Encourage and assist in breaking down new features into the smallest possible functional increments. This allows for easier development, testing, and integration, reducing complexity.

**Rule 9.3: Maintain Backward Compatibility (where reasonable).**
*   **AI Action:** When making changes or adding features, I will consider the impact on existing functionality and data structures (especially local storage). I will aim to maintain backward compatibility where it doesn't significantly impede progress or introduce undue complexity, or clearly flag when breaking changes are necessary and explain why.

**Rule 9.4: Update Documentation Promptly.**
*   **AI Action:** When a new feature is implemented or a significant change is made, I will remind or assist in updating relevant documentation, including the `README.md`, `CHANGELOG.md`, and any specific implementation guides (like `METRIC_IMPLEMENTATION_GUIDE.md`).

**Rule 9.5: Community Contribution Readiness.**
*   **AI Action:** For any new feature or significant code addition, I will consider how easily a new contributor could understand, modify, or contribute to it. This reinforces the importance of clear code, documentation, and modularity.
